{
	"info": {
		"_postman_id": "5ef13d1a-53b6-42ea-a5e5-9f7ff8233610",
		"name": "PetStore - Enuygun",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18599323"
	},
	"item": [
		{
			"name": "Place an order for a pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); \r",
							"var size = Object.keys(jsonData).length;  \r",
							"var responsLimit = 5000;\r",
							"var responseTime = pm.response.responseTime; \r",
							"\r",
							"pm.test(\"Body has all keys\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"petId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"quantity\");\r",
							"    pm.expect(pm.response.text()).to.include(\"shipDate\");\r",
							"    pm.expect(pm.response.text()).to.include(\"status\");\r",
							"    pm.expect(pm.response.text()).to.include(\"complete\");\r",
							"}); \r",
							"\r",
							"tests[\"Size control\"] = size == 6;     \r",
							"tests[\"id type control\"] = typeof(jsonData.id) === \"number\"; \r",
							"tests[\"petId type control\"] = typeof(jsonData.petId) === \"number\"; \r",
							"tests[\"quantity type control\"] = typeof(jsonData.quantity) === \"number\"; \r",
							"tests[\"shipDate type control\"] = typeof(jsonData.shipDate) === \"string\"; \r",
							"tests[\"status type control\"] = typeof(jsonData.status) === \"string\"; \r",
							"tests[\"complete type control\"] = typeof(jsonData.complete) === \"boolean\"; \r",
							"\r",
							"pm.test(\"Response Body Values is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(5);\r",
							"    pm.expect(jsonData.petId).to.eql(15);\r",
							"    pm.expect(jsonData.quantity).to.eql(35);\r",
							"    pm.expect(jsonData.shipDate).to.eql(\"2022-10-05T01:22:06.626+0000\");\r",
							"    pm.expect(jsonData.status).to.eql(\"avaiable\");\r",
							"    pm.expect(jsonData.complete).to.eql(true);\r",
							"});\r",
							" \r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Headers\", \"Content-Type, api_key, Authorization\");\r",
							"    pm.response.to.have.header(\"Server\", \"Jetty(9.2.9.v20150224)\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"     \r",
							"pm.test(\"Status code name has string\", () => {\r",
							"  pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should not be error\", function () { \r",
							"    pm.response.to.not.be.error; \r",
							"});\r",
							"\r",
							"pm.test(\"Response must be valid\", function(){\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 1KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
							"});\r",
							"\r",
							"pm.test(\"Check response time\", () => {  \r",
							"  if (responseTime > responsLimit) {       \r",
							"    console.log(\"Response time was longer than \" + responsLimit + \" ms \" + \"(\" + responseTime + \" ms)\" + \" / Response Date: \" + pm.response.headers.get(\"Date\"));\r",
							"  }\r",
							"  pm.expect(responseTime).to.be.below(responsLimit); \r",
							"});  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 5,\r\n    \"petId\": 15,\r\n    \"quantity\": 35,\r\n    \"shipDate\": \"2022-10-05T01:22:06.626Z\",\r\n    \"status\": \"avaiable\",\r\n    \"complete\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find purchase order by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); \r",
							"var size = Object.keys(jsonData).length;  \r",
							"var responsLimit = 5000;\r",
							"var responseTime = pm.response.responseTime; \r",
							"\r",
							"pm.test(\"Body has all keys\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"petId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"quantity\");\r",
							"    pm.expect(pm.response.text()).to.include(\"shipDate\");\r",
							"    pm.expect(pm.response.text()).to.include(\"status\");\r",
							"    pm.expect(pm.response.text()).to.include(\"complete\");\r",
							"}); \r",
							"\r",
							"tests[\"Size control\"] = size == 6;     \r",
							"tests[\"id type control\"] = typeof(jsonData.id) === \"number\"; \r",
							"tests[\"petId type control\"] = typeof(jsonData.petId) === \"number\"; \r",
							"tests[\"quantity type control\"] = typeof(jsonData.quantity) === \"number\"; \r",
							"tests[\"shipDate type control\"] = typeof(jsonData.shipDate) === \"string\"; \r",
							"tests[\"status type control\"] = typeof(jsonData.status) === \"string\"; \r",
							"tests[\"complete type control\"] = typeof(jsonData.complete) === \"boolean\"; \r",
							"\r",
							"pm.test(\"Response Body Values is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(5);\r",
							"    pm.expect(jsonData.petId).to.eql(15);\r",
							"    pm.expect(jsonData.quantity).to.eql(35);\r",
							"    pm.expect(jsonData.shipDate).to.eql(\"2022-10-05T01:22:06.626+0000\");\r",
							"    pm.expect(jsonData.status).to.eql(\"avaiable\");\r",
							"    pm.expect(jsonData.complete).to.eql(true);\r",
							"});\r",
							" \r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Headers\", \"Content-Type, api_key, Authorization\");\r",
							"    pm.response.to.have.header(\"Server\", \"Jetty(9.2.9.v20150224)\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"     \r",
							"pm.test(\"Status code name has string\", () => {\r",
							"  pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should not be error\", function () { \r",
							"    pm.response.to.not.be.error; \r",
							"});\r",
							"\r",
							"pm.test(\"Response must be valid\", function(){\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 1KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
							"});\r",
							"\r",
							"pm.test(\"Check response time\", () => {  \r",
							"  if (responseTime > responsLimit) {       \r",
							"    console.log(\"Response time was longer than \" + responsLimit + \" ms \" + \"(\" + responseTime + \" ms)\" + \" / Response Date: \" + pm.response.headers.get(\"Date\"));\r",
							"  }\r",
							"  pm.expect(responseTime).to.be.below(responsLimit); \r",
							"});  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/5",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete purchase order by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); \r",
							"var size = Object.keys(jsonData).length;  \r",
							"var responsLimit = 5000;\r",
							"var responseTime = pm.response.responseTime; \r",
							"\r",
							"pm.test(\"Body has all keys\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"code\");\r",
							"    pm.expect(pm.response.text()).to.include(\"type\");\r",
							"    pm.expect(pm.response.text()).to.include(\"message\"); \r",
							"}); \r",
							"\r",
							"tests[\"Size control\"] = size == 3;     \r",
							"tests[\"id type control\"] = typeof(jsonData.code) === \"number\"; \r",
							"tests[\"petId type control\"] = typeof(jsonData.type) === \"string\"; \r",
							"tests[\"quantity type control\"] = typeof(jsonData.message) === \"string\";  \r",
							"\r",
							"pm.test(\"Response Body Values is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(200);\r",
							"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
							"    pm.expect(jsonData.message).to.eql(\"5\");  \r",
							"}); \r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Headers\", \"Content-Type, api_key, Authorization\");\r",
							"    pm.response.to.have.header(\"Server\", \"Jetty(9.2.9.v20150224)\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"     \r",
							"pm.test(\"Status code name has string\", () => {\r",
							"  pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should not be error\", function () { \r",
							"    pm.response.to.not.be.error; \r",
							"});\r",
							"\r",
							"pm.test(\"Response must be valid\", function(){\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 1KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
							"});\r",
							"\r",
							"pm.test(\"Check response time\", () => {  \r",
							"  if (responseTime > responsLimit) {       \r",
							"    console.log(\"Response time was longer than \" + responsLimit + \" ms \" + \"(\" + responseTime + \" ms)\" + \" / Response Date: \" + pm.response.headers.get(\"Date\"));\r",
							"  }\r",
							"  pm.expect(responseTime).to.be.below(responsLimit); \r",
							"});  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/5",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Returns pet inventories by status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); \r",
							"var size = Object.keys(jsonData).length;  \r",
							"var responsLimit = 5000;\r",
							"var responseTime = pm.response.responseTime; \r",
							" \r",
							"if (jsonData.kk!=null){\r",
							"    tests[\"kk type control\"] = typeof(jsonData.kk) === \"number\";  \r",
							"    pm.expect(pm.response.text()).to.include(\"kk\"); \r",
							"} \r",
							"if (jsonData.sold!=null){ \r",
							"    tests[\"sold type control\"] = typeof(jsonData.sold) === \"number\";  \r",
							"    pm.expect(pm.response.text()).to.include(\"sold\"); \r",
							"}\r",
							"if (jsonData.string!=null){ \r",
							"    tests[\"string type control\"] = typeof(jsonData.string) === \"number\";  \r",
							"    pm.expect(pm.response.text()).to.include(\"string\"); \r",
							"}\r",
							"if (jsonData.string!=null){ \r",
							"    tests[\"unavailable type control\"] = typeof(jsonData.unavailable) === \"number\";  \r",
							"    pm.expect(pm.response.text()).to.include(\"unavailable\"); \r",
							"}\r",
							"if (jsonData.availeble!=null){ \r",
							"    tests[\"availeble type control\"] = typeof(jsonData.availeble) === \"number\";  \r",
							"    pm.expect(pm.response.text()).to.include(\"availeble\"); \r",
							"}\r",
							"if (jsonData.Busy!=null){ \r",
							"    tests[\"Busy type control\"] = typeof(jsonData.Busy) === \"number\";  \r",
							"    pm.expect(pm.response.text()).to.include(\"Busy\"); \r",
							"}\r",
							"if (jsonData.pending!=null){ \r",
							"    tests[\"pending type control\"] = typeof(jsonData.pending) === \"number\";  \r",
							"    pm.expect(pm.response.text()).to.include(\"pending\"); \r",
							"}\r",
							"if (jsonData.available!=null){ \r",
							"    tests[\"available type control\"] = typeof(jsonData.available) === \"number\";  \r",
							"    pm.expect(pm.response.text()).to.include(\"available\"); \r",
							"}\r",
							"if (jsonData.avalible!=null){ \r",
							"    tests[\"avalible type control\"] = typeof(jsonData.avalible) === \"number\";  \r",
							"    pm.expect(pm.response.text()).to.include(\"avalible\"); \r",
							"}\r",
							"if (jsonData.avaliable18!=null){ \r",
							"    tests[\"avaliable18 type control\"] = typeof(jsonData.avaliable18) === \"number\";  \r",
							"    pm.expect(pm.response.text()).to.include(\"avaliable18\"); \r",
							"}\r",
							"if (jsonData.avaliable!=null){ \r",
							"    tests[\"avaliable type control\"] = typeof(jsonData.avaliable) === \"number\";  \r",
							"    pm.expect(pm.response.text()).to.include(\"avaliable\"); \r",
							"}\r",
							"if (jsonData.connector_up!=null){ \r",
							"    tests[\"connector_up type control\"] = typeof(jsonData.connector_up) === \"number\";  \r",
							"    pm.expect(pm.response.text()).to.include(\"connector_up\"); \r",
							"}\r",
							"if (jsonData.status!=null){ \r",
							"    tests[\"status type control\"] = typeof(jsonData.status) === \"number\";  \r",
							"    pm.expect(pm.response.text()).to.include(\"status\"); \r",
							"}\r",
							" \r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Headers\", \"Content-Type, api_key, Authorization\");\r",
							"    pm.response.to.have.header(\"Server\", \"Jetty(9.2.9.v20150224)\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"     \r",
							"pm.test(\"Status code name has string\", () => {\r",
							"  pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should not be error\", function () { \r",
							"    pm.response.to.not.be.error; \r",
							"});\r",
							"\r",
							"pm.test(\"Response must be valid\", function(){\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 1KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
							"});\r",
							"\r",
							"pm.test(\"Check response time\", () => {  \r",
							"  if (responseTime > responsLimit) {       \r",
							"    console.log(\"Response time was longer than \" + responsLimit + \" ms \" + \"(\" + responseTime + \" ms)\" + \" / Response Date: \" + pm.response.headers.get(\"Date\"));\r",
							"  }\r",
							"  pm.expect(responseTime).to.be.below(responsLimit); \r",
							"});  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/inventory",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"inventory"
					]
				}
			},
			"response": []
		}
	]
}